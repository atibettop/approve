// index.js

// ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
const express = require('express');
const axios = require('axios');
const bodyParser = require('body-parser');

// **‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î Environment Variables ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Local Development**
// ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ process.env
if (process.env.NODE_ENV !== 'production') {
    require('dotenv').config();
}


// ‡∏™‡∏£‡πâ‡∏≤‡∏á Express app
const app = express();

// ‡πÉ‡∏ä‡πâ middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö parsing JSON request body
app.use(bodyParser.json());

// **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å:** ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Port ‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ü‡∏±‡∏á
// Cloud Run ‡πÅ‡∏•‡∏∞‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ñ‡∏•‡∏≤‡∏ß‡∏î‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏à‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î Port ‡∏ú‡πà‡∏≤‡∏ô Environment Variable 'PORT'
// ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î 'PORT' (‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤), ‡∏à‡∏∞‡πÉ‡∏ä‡πâ Port 8080 ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
const PORT = process.env.PORT || 8080;

// **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å:** ‡∏¢‡πâ‡∏≤‡∏¢ LINE_CHANNEL_ACCESS_TOKEN ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Environment Variable ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
// ‡∏´‡πâ‡∏≤‡∏° Hardcode Token ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ Deploy ‡∏Ç‡∏∂‡πâ‡∏ô Production
const LINE_CHANNEL_ACCESS_TOKEN = process.env.LINE_CHANNEL_ACCESS_TOKEN;

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LINE_CHANNEL_ACCESS_TOKEN ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß
if (!LINE_CHANNEL_ACCESS_TOKEN) {
    console.error('Error: LINE_CHANNEL_ACCESS_TOKEN is not set in environment variables.');
    // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    // ‡πÉ‡∏ô Production ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    process.exit(1);
}

// Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Health Check (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö ‡πÅ‡∏ï‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏¥‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cloud Deployment)
// ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
app.get('/', (req, res) => {
    res.status(200).send('Line Approve Bot is running!');
});

const createConfirmationFlexMessage = (userId, actionLabel, actionData) => {
    return {
        to: userId,
        messages: [
            {
                type: "flex",
                altText: `‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£${actionLabel}`,
                contents: {
                    type: "bubble",
                    body: {
                        type: "box",
                        layout: "vertical",
                        contents: [
                            {
                                type: "text",
                                text: `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£${actionLabel}‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
                                weight: "bold",
                                size: "md",
                                align: "center",
                                margin: "none"
                            }
                        ]
                    },
                    footer: {
                        type: "box",
                        layout: "horizontal",
                        spacing: "sm",
                        margin: "md",
                        contents: [
                            {
                                type: "button",
                                style: "primary",
                                color: "#1DB446",
                                action: {
                                    type: "postback",
                                    label: "‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
                                    data: `action=confirm&originalAction=${actionData}` // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
                                },
                                flex: 1
                            },
                            {
                                type: "button",
                                style: "secondary",
                                color: "#FF3B30",
                                action: {
                                    type: "postback",
                                    label: "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
                                    data: "action=cancel"
                                },
                                flex: 1
                            }
                        ]
                    }
                }
            }
        ]
    };
};


// Webhook Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE Platform
app.post('/webhook', async (req, res) => {
    // Log request body ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£ Debug (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÉ‡∏ô Production ‡πÑ‡∏î‡πâ)
    console.log('Webhook Request Body:', JSON.stringify(req.body, null, 2));

    const events = req.body.events;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Line Signature ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏¥‡πà‡∏á)
    // ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ 'line-bot-sdk' ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏á
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: const signature = req.headers['x-line-signature'];
    // if (!validateSignature(req.rawBody, signature, LINE_CHANNEL_SECRET)) {
    //    return res.status(401).send('Invalid signature');
    // }

    for (const event of events) {
        console.log('Processing event:', event); // Log ‡πÅ‡∏ï‡πà‡∏•‡∏∞ Event

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Event ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏°‡∏µ userId
         if (event.type === 'message' && event.source && event.source.userId) {
            const userId = event.source.groupId || event.source.userId; // ‡πÉ‡∏ä‡πâ groupId ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡πÉ‡∏ä‡πâ userId
            console.log(`Received message from userId: ${userId}`);

            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤ (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å Event ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô)
            // ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            const leaveDetails = {
                requester: "‡∏ô‡∏≤‡∏¢‡∏≠‡∏ò‡∏¥‡πÄ‡∏ö‡∏®‡∏£‡πå ‡∏™‡∏±‡∏á‡∏Ü‡∏∞‡∏†‡∏π‡∏°‡∏¥",
                leaveType: "‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô",
                reason: "‡πÑ‡∏õ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö",
                dateTime: "11/07/2568 - 11/07/2568",
                totalDuration: "1 ‡∏ß‡∏±‡∏ô 0 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á 0 ‡∏ô‡∏≤‡∏ó‡∏µ"
            };

            const flexMessage = {
                to: userId,
                messages: [
                    {
                        type: "flex",
                        altText: "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏≤",
                        contents: {
                            type: "bubble",
                            body: {
                                type: "box",
                                layout: "vertical",
                                contents: [
                                    {
                                        type: "text",
                                        text: "üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏≤ üîî", // ‡πÄ‡∏û‡∏¥‡πà‡∏° Emoji ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à
                                        weight: "bold",
                                        size: "xl", // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô
                                        align: "center",
                                        margin: "none",
                                        color: "#333333"
                                    },
                                    {
                                        type: "separator", // ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡πÉ‡∏ï‡πâ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
                                        margin: "md"
                                    },
                                    {
                                        type: "box", // Box ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏≤
                                        layout: "vertical",
                                        margin: "lg",
                                        spacing: "sm",
                                        contents: [
                                            {
                                                type: "box",
                                                layout: "baseline",
                                                contents: [
                                                    { type: "text", text: "‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡∏•‡∏≤:", flex: 2, size: "sm", color: "#AAAAAA" },
                                                    { type: "text", text: leaveDetails.requester, flex: 5, size: "sm", wrap: true }
                                                ]
                                            },
                                            {
                                                type: "box",
                                                layout: "baseline",
                                                contents: [
                                                    { type: "text", text: "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤:", flex: 2, size: "sm", color: "#AAAAAA" },
                                                    { type: "text", text: leaveDetails.leaveType, flex: 5, size: "sm", wrap: true }
                                                ]
                                            },
                                            {
                                                type: "box",
                                                layout: "baseline",
                                                contents: [
                                                    { type: "text", text: "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:", flex: 2, size: "sm", color: "#AAAAAA" },
                                                    { type: "text", text: leaveDetails.reason, flex: 5, size: "sm", wrap: true }
                                                ]
                                            },
                                            {
                                                type: "box",
                                                layout: "baseline",
                                                contents: [
                                                    { type: "text", text: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà / ‡πÄ‡∏ß‡∏•‡∏≤:", flex: 2, size: "sm", color: "#AAAAAA" },
                                                    { type: "text", text: leaveDetails.dateTime, flex: 5, size: "sm", wrap: true }
                                                ]
                                            },
                                            {
                                                type: "box",
                                                layout: "baseline",
                                                contents: [
                                                    { type: "text", text: "(‡∏£‡∏ß‡∏°:", flex: 2, size: "sm", color: "#AAAAAA" },
                                                    { type: "text", text: leaveDetails.totalDuration + ")", flex: 5, size: "sm", wrap: true }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        type: "separator", // ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
                                        margin: "lg"
                                    },
                                    {
                                        type: "text",
                                        text: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
                                        color: "#1DB446", // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏™‡∏î‡πÉ‡∏™
                                        size: "md",
                                        align: "center",
                                        margin: "lg",
                                        weight: "bold"
                                    }
                                ]
                            },
                            footer: {
                                type: "box",
                                layout: "horizontal", // **‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô horizontal ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô**
                                spacing: "sm", // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°
                                margin: "md", // Margin ‡∏£‡∏≠‡∏ö footer box
                                contents: [
                                    {
                                        type: "button",
                                        style: "primary",
                                        color: "#1DB446", // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
                                        action: {
                                            type: "postback",
                                            label: "‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥", // ‡πÄ‡∏û‡∏¥‡πà‡∏° Emoji
                                            data: "action=approve"
                                        },
                                        flex: 1 // ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡πÜ ‡∏Å‡∏±‡∏ô
                                    },
                                    {
                                        type: "button",
                                        style: "secondary",
                                        color: "#FF3B30", // ‡∏™‡∏µ‡πÅ‡∏î‡∏á
                                        action: {
                                            type: "postback",
                                            label: "‚ùå ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥", // ‡πÄ‡∏û‡∏¥‡πà‡∏° Emoji
                                            data: "action=reject"
                                        },
                                        flex: 1 // ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡πÜ ‡∏Å‡∏±‡∏ô
                                    }
                                ]
                            }
                        }
                    }
                ]
            };

            try {
                // ‡∏™‡πà‡∏á Flex Message ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                await axios.post('https://api.line.me/v2/bot/message/push', flexMessage, {
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`
                    }
                });
                console.log(`Flex message sent to userId: ${userId}`);
            } catch (error) {
                // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                console.error('Error sending message to Line:', error.response ? error.response.data : error.message);
            }
        }
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Event ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô postback, follow, unfollow, join, leave
        else if (event.type === 'postback') {
            console.log('Postback event received:', event.postback.data);
            const userId = event.source.userId;
            const data = event.postback.data;

            // ‡πÅ‡∏¢‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• postback
            const params = new URLSearchParams(data);
            const action = params.get('action');
            const originalAction = params.get('originalAction'); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Flow ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô

            let replyMessage = '';

            if (action === 'approve') {
                // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
                const confirmMessage = createConfirmationFlexMessage(userId, '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏≤', 'approve');
                try {
                    await axios.post('https://api.line.me/v2/bot/message/push', confirmMessage, { // ‡πÉ‡∏ä‡πâ push ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`
                        }
                    });
                    console.log(`Confirmation message sent for approve to userId: ${userId}`);
                } catch (error) {
                    console.error('Error sending confirmation message:', error.response ? error.response.data : error.message);
                }
            } else if (action === 'reject') {
                // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
                const confirmMessage = createConfirmationFlexMessage(userId, '‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏≤', 'reject');
                try {
                    await axios.post('https://api.line.me/v2/bot/message/push', confirmMessage, { // ‡πÉ‡∏ä‡πâ push ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`
                        }
                    });
                    console.log(`Confirmation message sent for reject to userId: ${userId}`);
                } catch (error) {
                    console.error('Error sending confirmation message:', error.response ? error.response.data : error.message);
                }
            } else if (action === 'confirm' && originalAction) {
                // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
                if (originalAction === 'approve') {
                    replyMessage = '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß';
                    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
                } else if (originalAction === 'reject') {
                    replyMessage = '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß';
                    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
                }
                try {
                    await axios.post('https://api.line.me/v2/bot/message/reply', {
                        replyToken: event.replyToken, // ‡πÉ‡∏ä‡πâ replyToken ‡∏à‡∏≤‡∏Å postback ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                        messages: [{ type: 'text', text: replyMessage }]
                    }, {
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`
                        }
                    });
                    console.log(`Final action message sent: ${replyMessage}`);
                } catch (error) {
                    console.error('Error replying to confirmation:', error.response ? error.response.data : error.message);
                }
            } else if (action === 'cancel') {
                // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
                replyMessage = '‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å';
                try {
                    await axios.post('https://api.line.me/v2/bot/message/reply', {
                        replyToken: event.replyToken, // ‡πÉ‡∏ä‡πâ replyToken ‡∏à‡∏≤‡∏Å postback ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                        messages: [{ type: 'text', text: replyMessage }]
                    }, {
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`
                        }
                    });
                    console.log(`Action cancelled message sent.`);
                } catch (error) {
                    console.error('Error replying to cancellation:', error.response ? error.response.data : error.message);
                }
            }
        }
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Event ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á Line Bot ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    }

    // ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 200 OK ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ LINE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Event ‡πÅ‡∏•‡πâ‡∏ß
    res.sendStatus(200);
});

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Server ‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á Request ‡∏ö‡∏ô Port ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
    console.log(`Access Token Status: ${LINE_CHANNEL_ACCESS_TOKEN ? 'Loaded' : 'NOT LOADED'}`);
});
